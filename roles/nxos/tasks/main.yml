# ==============================================================
#  Copyright (c) 2023 Cisco and/or its affiliates.
#  This software is licensed to you under the terms of the Cisco Sample
#  Code License, Version 1.1 (the "License"). You may obtain a copy of the
#  License at
#  https://developer.cisco.com/docs/licenses
#  All use of the material herein must be in accordance with the terms of
#  the License. All rights not expressly granted by the License are
#  reserved. Unless required by applicable law or agreed to separately in
#  writing, software distributed under the License is distributed on an "AS
#  IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
#  or implied.
#  __author__ = "Trevor Maco <tmaco@cisco.com>"
#  __copyright__ = "Copyright (c) 2023 Cisco and/or its affiliates."
#  __license__ = "Cisco Sample Code License, Version 1.1"
# ==============================================================
---
- name: Configure prerequisites for Docker on Nexus 9K
  cisco.nxos.nxos_config:
    lines:
      - feature bash-shell
      - vrf context management
      - ip domain-name domain.com
      - ip name-server 8.8.8.8
  when: option == "deploy"

- name: Start Docker daemon and enable auto-start on Nexus 9K
  block:
    - name: Start Docker daemon and enable auto-start on Nexus 9K
      cisco.nxos.nxos_command:
        commands:
        - run bash sudo service docker start
        - run bash sudo chkconfig --add docker
        - run bash sudo chkconfig --list | grep docker
        match: any
        wait_for:
        - result[0] == ""
        - result[0] contains "Starting dockerd"
      register: command_output
  always:
    - name: Print Output (Docker Daemon)
      debug:
        var: command_output.stdout_lines
  when: option == "deploy"

- name: Pull Docker Container (Pre-sizing Attempt)
  block:
    - name: Pull Docker Container (Pre-sizing Attempt)
      cisco.nxos.nxos_command:
        commands:
        - run bash sudo docker pull {{ image_name }}
        retries: 0
      register: presize_output
      ignore_errors: true
  always:
    - name: Print Output (Docker Pull)
      debug:
        var: presize_output.stdout_lines
  when: option == "deploy"

- name: Resize Docker library folder on Nexus 9K (for larger containers)
  block:
    - name: Resize Docker library folder on Nexus 9K (for larger containers)
      cisco.nxos.nxos_command:
        commands:
        - command: guestshell disable
          prompt: You will not be able to access your guest shell if it is disabled. Are you sure you want to disable the guest shell?
          answer: y
        - run bash sudo df -kh /var/lib/docker
        - run bash sudo service docker stop
        - run bash sudo ls -l /bootflash/dockerpart
        - run bash sudo truncate -s +{{ truncate_increase }} /bootflash/dockerpart
        - run bash sudo ls -l /bootflash/dockerpart
        - run bash sudo e2fsck -f /bootflash/dockerpart
        - run bash sudo /sbin/resize2fs /bootflash/dockerpart
        - run bash sudo e2fsck -f /bootflash/dockerpart
        - run bash sudo service docker start
        - run bash sudo df -kh /var/lib/docker
        - guestshell enable
        match: any
        wait_for:
          - result[8] == ""
          - result[8] contains "Starting dockerd"
      register: command_output
      when: '"no space left" in presize_output.stdout[0]'
  always:
    - name: Print Output (Resize)
      debug:
        var: command_output.stdout_lines
      when: '"no space left" in presize_output.stdout[0]'
  when: option == "deploy"

- name: Pull Docker Container (Post-sizing Attempt)
  block:
    - name: Pull Docker Container (Post-sizing Attempt)
      cisco.nxos.nxos_command:
        commands:
        - run bash sudo docker pull {{ image_name }}
        retries: 0
      register: command_output
      when: '"no space left" in presize_output.stdout[0]'
  always:
    - name: Print Output (Docker Pull)
      debug:
        var: command_output.stdout_lines
      when: '"no space left" in presize_output.stdout[0]'
  when: option == "deploy"

- name: Run Docker Container
  cisco.nxos.nxos_command:
    commands:
      - run bash sudo docker run -d --net={{ network_type }} {{ image_name }}
  when: option == "deploy"

- name: Verify Docker Container Downloaded and Running
  block:
    - name: Get Docker Container Images and Running Containers
      cisco.nxos.nxos_command:
        commands:
          - run bash sudo docker images
          - run bash sudo docker ps
      register: command_output
    - name: Asset Container Image Downloaded
      assert:
        that: "'{{ image_name }}' in command_output.stdout[0]"
        fail_msg: "Container Image not present... check runtime output."
    - name: Asset Container Running
      assert:
        that: command_output.stdout[1] | regex_search('Up (?:[0-9]|[1-5][0-9]|60) (?:second|minute|hour)(s)', multiline=True, ignorecase=True) is not none
        fail_msg: "Container not running... check runtime output."
  always:
    - name: Print Output (Docker Run)
      debug:
        var: command_output.stdout
  when: option == "deploy" or option == "check"

- name: Save run config to startup config
  cisco.nxos.nxos_config:
    save_when: always
  when: option == "deploy"

